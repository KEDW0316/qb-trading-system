---
description: QB Trading System 전용 코딩 규칙 및 아키텍처 가이드라인
globs: **/*.py, **/*.ts, **/*.tsx, **/*.js, **/*.jsx
alwaysApply: true
---

# 가장 중요한 규칙

모든 명령은

1. 간략한 계획 설명
2. **허락** 및 **검토** 받기
3. 검토가 완료된 건에 한해서 코드 수정.
4. 한번에 한 파일을 수정할 수 있도록 단계적으로 생각.

이 룰을 지키고 시작해.

# QB Trading System 코딩 규칙

QB Trading System은 **실시간 트레이딩**을 위한 **이벤트 기반 마이크로서비스 아키텍처**입니다. 실제 금융 거래를 처리하므로 **신뢰성, 성능, 보안**이 최우선입니다.

## 🎯 **핵심 설계 원칙**

### **KISS (Keep It Simple, Stupid)**

- **복잡성을 줄이고 단순하게 유지**
- 코드를 최대한 단순하게 작성하여 가독성을 높이고 유지보수를 용이하게 함
- 과도한 추상화나 복잡한 디자인 패턴 지양

### **YAGNI (You Ain't Gonna Need It)**

- **현재 필요한 기능만 구현**
- 미래에 필요할 수도 있는 기능은 구현하지 않음
- 불필요한 기능 추가를 방지하고 개발 시간을 절약

### **DRY (Don't Repeat Yourself)**

- **코드 중복을 피하고 재사용 가능한 코드 작성**
- 공통 로직은 유틸리티 함수나 베이스 클래스로 추출
- 설정이나 상수는 중앙화된 config 파일에서 관리

## 🏗️ **아키텍처 규칙**

### **이벤트 기반 설계**

- **모든 엔진 간 통신은 Redis Pub/Sub 이벤트를 통해서만 수행**
- 직접적인 함수 호출이나 객체 참조 금지
- 이벤트 이름은 `snake_case`로 명명: `market_data_received`, `trading_signal`, `order_executed`

```python
# ✅ DO: 이벤트 기반 통신
await event_bus.publish('market_data_received', {
    'symbol': 'AAPL',
    'price': 150.0,
    'timestamp': datetime.now()
})

# ❌ DON'T: 직접 호출
technical_analyzer.update_indicators(market_data)
```

### **엔진 독립성**

- **각 엔진은 완전히 독립적으로 동작**해야 함
- 다른 엔진의 내부 구현에 의존하지 않음
- 엔진별 설정은 환경변수나 config 파일로 분리

### **비동기 처리**

- **모든 I/O 작업은 비동기(`async/await`)로 처리**
- 블로킹 작업으로 인한 성능 저하 방지
- 동시성을 활용한 효율적인 데이터 처리

```python
# ✅ DO: 비동기 처리
async def collect_market_data(symbol: str) -> MarketData:
    async with aiohttp.ClientSession() as session:
        async with session.get(f"/api/market/{symbol}") as response:
            return await response.json()

# ❌ DON'T: 동기 처리
def collect_market_data(symbol: str) -> MarketData:
    response = requests.get(f"/api/market/{symbol}")
    return response.json()
```

## 🔒 **안전성 및 신뢰성**

### **에러 처리**

- **모든 외부 API 호출에는 재시도 로직과 회로 차단기 패턴 적용**
- 예외는 구체적으로 처리하고 적절한 로깅 수행
- 시스템 전체를 중단시키는 예외는 절대 발생시키지 않음

```python
# ✅ DO: 포괄적 에러 처리
async def execute_order(order: Order) -> OrderResult:
    try:
        result = await broker_api.place_order(order)
        logger.info(f"Order executed successfully: {order.id}")
        return result
    except BrokerAPIError as e:
        logger.error(f"Broker API error: {e}")
        await event_bus.publish('order_failed', {'order_id': order.id, 'error': str(e)})
        return OrderResult(status='failed', error=str(e))
    except Exception as e:
        logger.critical(f"Unexpected error in order execution: {e}")
        # 비상 정지 시그널 발송
        await event_bus.publish('emergency_stop', {'reason': f'Order execution error: {e}'})
        return OrderResult(status='error', error='System error occurred')
```

### **데이터 검증**

- **모든 입력 데이터는 Pydantic 모델로 검증**
- 금융 데이터의 무결성을 보장하기 위한 추가 검증 로직
- 잘못된 데이터로 인한 거래 오류 방지

```python
# ✅ DO: Pydantic 모델 검증
from pydantic import BaseModel, validator
from decimal import Decimal

class MarketData(BaseModel):
    symbol: str
    price: Decimal
    volume: int
    timestamp: datetime

    @validator('price')
    def price_must_be_positive(cls, v):
        if v <= 0:
            raise ValueError('Price must be positive')
        return v

    @validator('symbol')
    def symbol_format(cls, v):
        if not v.isalpha() or len(v) > 10:
            raise ValueError('Invalid symbol format')
        return v.upper()
```

### **로깅 및 모니터링**

- **모든 중요한 작업은 구조화된 로깅으로 기록**
- 로그 레벨을 적절히 활용: DEBUG, INFO, WARNING, ERROR, CRITICAL
- 트레이딩 관련 작업은 별도의 audit 로그로 관리

```python
# ✅ DO: 구조화된 로깅
import structlog

logger = structlog.get_logger()

await logger.info(
    "Order placed",
    order_id=order.id,
    symbol=order.symbol,
    quantity=order.quantity,
    price=order.price,
    strategy=order.strategy_name
)
```

## 💰 **금융 데이터 처리**

### **정밀도 보장**

- **모든 금액 계산은 `Decimal` 타입 사용**
- `float` 타입은 정밀도 오차로 인해 절대 사용 금지
- 수수료 계산 시 소수점 처리를 명확히 정의

```python
# ✅ DO: Decimal 사용
from decimal import Decimal, ROUND_HALF_UP

price = Decimal('150.25')
quantity = Decimal('100')
total = price * quantity  # Decimal('15025.00')

# 수수료 계산 (소수점 둘째 자리에서 반올림)
commission = (total * Decimal('0.0025')).quantize(
    Decimal('0.01'),
    rounding=ROUND_HALF_UP
)

# ❌ DON'T: float 사용
price = 150.25
quantity = 100
total = price * quantity  # 정밀도 오차 가능
```

### **시간 처리**

- **모든 시간은 UTC 기준으로 저장하고 처리**
- 한국 시간 표시가 필요한 경우만 변환
- 거래 시간 검증 로직 필수 포함

```python
# ✅ DO: UTC 시간 사용
from datetime import datetime, timezone
import pytz

utc_now = datetime.now(timezone.utc)
kst_tz = pytz.timezone('Asia/Seoul')
kst_time = utc_now.astimezone(kst_tz)

# 거래 시간 검증
def is_trading_hours(dt: datetime) -> bool:
    """한국 주식시장 거래시간 확인"""
    kst_time = dt.astimezone(pytz.timezone('Asia/Seoul'))
    weekday = kst_time.weekday()
    hour = kst_time.hour
    minute = kst_time.minute

    # 평일 09:00-15:30
    if weekday < 5 and (9 <= hour < 15 or (hour == 15 and minute <= 30)):
        return True
    return False
```

## 🧪 **테스트 규칙**

### **테스트 커버리지**

- **모든 비즈니스 로직은 단위 테스트 필수**
- 금융 계산 로직은 100% 커버리지 목표
- 이벤트 기반 통신은 통합 테스트로 검증

### **실용적 테스트 도구 관리**

- **연결 테스트 스크립트는 `tools/` 디렉토리에 보관**
- **헬스체크 도구는 지속적으로 활용 가능하도록 유지**
- **성능 벤치마크 스크립트는 재사용 가능하게 구성**

```python
# ✅ DO: 재사용 가능한 테스트 도구 구조
tools/
├── health_checks/
│   ├── redis_connection_test.py
│   ├── postgres_connection_test.py
│   └── kis_api_test.py
├── performance/
│   ├── redis_benchmark.py
│   └── data_processing_benchmark.py
└── data_validation/
    ├── market_data_validator.py
    └── trading_signal_validator.py

# 실행 방법:
# python tools/health_checks/redis_connection_test.py
# python tools/performance/redis_benchmark.py --duration=60s
```

### **테스트 도구 네이밍 컨벤션**

- **연결 테스트**: `{component}_connection_test.py`
- **성능 테스트**: `{component}_benchmark.py`
- **데이터 검증**: `{data_type}_validator.py`
- **모니터링 도구**: `{component}_monitor.py`

### **모킹 전략**

- **외부 API는 모킹하여 테스트**
- 실제 거래소 API 호출은 테스트에서 금지
- 테스트용 가짜 데이터는 실제와 유사한 형태로 구성

```python
# ✅ DO: 외부 API 모킹
@pytest.fixture
def mock_broker_api():
    with patch('qb.api.kis_client.KISClient') as mock:
        mock.place_order.return_value = {
            'order_id': 'TEST123',
            'status': 'filled',
            'executed_price': Decimal('150.00')
        }
        yield mock

async def test_order_execution(mock_broker_api):
    engine = OrderEngine()
    result = await engine.execute_order(test_order)
    assert result.status == 'filled'
    mock_broker_api.place_order.assert_called_once()
```

## 🚀 **성능 최적화**

### **메모리 관리**

- **대용량 데이터는 스트리밍 방식으로 처리**
- Redis 메모리 사용량 모니터링 (목표: 20-25MB)
- 불필요한 데이터 보관 기간 최소화

### **데이터베이스 최적화**

- **적절한 인덱스 설정으로 쿼리 성능 최적화**
- 시계열 데이터는 TimescaleDB 하이퍼테이블 활용
- 배치 삽입으로 대용량 데이터 처리

```python
# ✅ DO: 배치 삽입
async def save_market_data_batch(data_list: List[MarketData]):
    async with db_session() as session:
        await session.execute(
            insert(market_data_table),
            [data.dict() for data in data_list]
        )
        await session.commit()
```

## 🔐 **보안 규칙**

### **API 키 관리**

- **모든 API 키는 환경변수로 관리**
- 코드에 하드코딩 절대 금지
- `.env` 파일은 `.gitignore`에 포함

### **입력 검증**

- **모든 외부 입력은 sanitization 후 사용**
- SQL 인젝션 방지를 위한 파라미터화된 쿼리 사용
- 사용자 입력에 대한 화이트리스트 검증

## 📝 **코드 구조 및 네이밍**

### **파일 구조**

```
qb/
├── engines/           # 8개 마이크로서비스 엔진
│   ├── data_collector/
│   ├── technical_analyzer/
│   ├── strategy_engine/
│   └── ...
├── models/           # Pydantic 모델
├── database/         # DB 스키마 및 연결
├── utils/            # 공통 유틸리티
├── config/           # 설정 관리
└── tests/            # 테스트 코드
```

### **네이밍 컨벤션**

- **클래스**: PascalCase (`DataCollector`, `OrderEngine`)
- **함수/변수**: snake_case (`collect_data`, `order_id`)
- **상수**: UPPER_SNAKE_CASE (`MAX_ORDER_SIZE`, `API_TIMEOUT`)
- **이벤트**: snake_case (`market_data_received`, `order_executed`)

### **타입 힌트**

- **모든 함수에 타입 힌트 필수 작성**
- 복잡한 타입은 TypeAlias 활용
- Optional, Union 등을 명확히 표시

```python
# ✅ DO: 명확한 타입 힌트
from typing import Optional, List, Dict, Union
from decimal import Decimal

OrderID = str
Price = Decimal
Quantity = int

async def place_order(
    symbol: str,
    price: Price,
    quantity: Quantity,
    order_type: str = "limit"
) -> Optional[OrderID]:
    """주문을 실행하고 주문 ID를 반환합니다."""
    pass
```

## 📊 **모니터링 및 알림**

### **헬스체크**

- **각 엔진은 헬스체크 엔드포인트 제공**
- 주기적인 상태 확인 및 자동 복구 메커니즘
- 장애 시 즉시 알림 발송

### **성능 지표**

- **핵심 메트릭 수집 및 모니터링**
- 응답 시간, 처리량, 에러율 추적
- 비정상적인 패턴 감지 시 자동 알림

---

이 규칙들은 **QB Trading System의 안정성과 성능**을 보장하기 위한 기본 가이드라인입니다.
모든 개발자는 이 규칙을 숙지하고 준수해야 합니다.

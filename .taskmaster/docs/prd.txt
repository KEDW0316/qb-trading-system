# 한국 주식 알고리즘 트레이딩 시스템 (QB) - PRD

## 1. 프로젝트 개요

### 목표
- **소소하지만 확실한 수익** 창출
- **200만원 초기 자금으로 일 1000원 수익 목표** (일 0.05% 수익률)
- **격주 토요일 오전 10시** 정기 시스템 점검 및 최적화
- **2025년 4월 1일까지** 시스템 구축 완료 (Sprint 1)

### 핵심 가치
- 전략의 유연성 (쉽게 갈아낄 수 있는 플러그인 아키텍처)
- 철저한 리스크 관리
- 데이터 기반 의사결정
- 완전 자동화된 거래 시스템

## 2. 기술 스택

### 백엔드
- **언어**: Python 3.11+
- **핵심 라이브러리**: 
  - pandas, numpy (데이터 처리)
  - ta-lib, TA-Lib (기술적 분석)
  - websockets (실시간 데이터)
  - sqlalchemy (ORM)
  - fastapi (API 서버)

### 데이터베이스
- **메인 DB**: PostgreSQL + TimescaleDB 확장
  - 시계열 데이터 최적화
  - 1분봉/5분봉 데이터 압축 저장
  - 복잡한 분석 쿼리 지원
- **캐시**: Redis
  - 실시간 데이터 버퍼링 (20-25MB 예상 사용량)
  - 종목별 최근 200개 캔들 데이터 저장
  - 기술적 지표 계산 결과 캐싱
  - 이벤트 메시지 큐 (Pub/Sub)
  - 빠른 조회 (0.001초 이내) 및 전략 엔진 최적화

### 프론트엔드
- **웹 대시보드**: Next.js 14 + TypeScript
- **UI 라이브러리**: Shadcn UI, Tailwind CSS
- **차트**: TradingView Charting Library 또는 Chart.js
- **실시간 통신**: WebSocket

## 3. 데이터 소스

### 실시간 데이터
- **한국투자증권 API (WebSocket)**
  - 실시간 호가/체결가
  - 실시간 뉴스/공시

### 과거 데이터
- **한국투자증권 REST API** (메인)
- **네이버 금융** (보조 데이터)
- **yfinance** (글로벌 지수 비교)

### 기업 정보
- **한국투자증권 API** (기본 정보)
- **DART API** (전자공시, 재무제표)

## 4. 시스템 아키텍처

### 전체 구조
시스템은 **이벤트 기반 마이크로서비스 아키텍처**로 설계되어 각 엔진이 독립적으로 동작하면서 Redis를 통한 이벤트 버스로 통신합니다.

### 데이터 흐름
1. **데이터 수집기** → 한투 WebSocket에서 실시간 데이터 수신
2. **Redis 저장** → 최신 200개 캔들 데이터 및 기술지표 캐싱
3. **기술 분석기** → Redis 데이터로 RSI, 이동평균 등 계산
4. **전략 엔진** → 지표 기반 매매 신호 생성
5. **리스크 엔진** → 신호 승인/거부 판단
6. **주문 엔진** → 한투 API로 실제 거래 실행

### 핵심 모듈

#### 4.1 API Layer (FastAPI Server)
- **REST API**: 포트폴리오 조회, 전략 설정, 거래 내역 등
- **WebSocket**: 프론트엔드와 실시간 데이터 통신
- **인증/권한**: 사용자 인증 및 API 접근 제어
- **요청 검증**: 입력 데이터 유효성 검사

#### 4.2 전략 엔진 (Strategy Engine)
- **플러그인 아키텍처**: 새 전략을 파일 추가만으로 런타임 로드
- **이벤트 구독**: "market_data_received" 이벤트 수신
- **신호 생성**: Redis의 기술지표 데이터 기반 매매 신호 생성
- **성과 추적**: 전략별 수익률, 승률 등 실시간 추적
- **파라미터 관리**: 전략별 설정값 동적 변경

#### 4.3 주문 엔진 (Order Manager)
- **실제 거래 실행**: 한국투자증권 API를 통한 주문 처리
- **포지션 관리**: 현재 보유 종목 및 수량 실시간 추적
- **주문 큐**: 동시 주문 처리 및 순서 관리
- **체결 관리**: 부분 체결, 미체결 주문 추적
- **수수료 계산**: 실제 거래 비용 반영

#### 4.4 리스크 엔진 (Risk Manager)
- **실시간 리스크 체크**: 주문 전 포지션 크기, 손실 한도 검증
- **자동 손절/익절**: 설정된 조건 달성 시 자동 주문 실행
- **일일/월간 한도**: 누적 손실 추적 및 거래 중단
- **RPC 방식**: 다른 엔진의 요청에 즉시 응답
- **비상 정지**: 시스템 이상 시 모든 거래 중단

#### 4.5 데이터 수집기 (Data Collector)
- **WebSocket 클라이언트**: 한투 API 실시간 연결 관리
- **다중 소스**: 한투, 네이버, 야후 등 데이터 통합
- **재연결 로직**: 연결 끊김 시 자동 재연결
- **데이터 정규화**: 소스별 다른 형식을 통일된 구조로 변환
- **Redis 저장**: 종목별 최근 200개 캔들 Rolling 업데이트

#### 4.6 기술 분석기 (Technical Analyzer)
- **지표 계산**: RSI, MACD, 볼린저밴드, 이동평균 등
- **Redis 캐싱**: 계산된 지표 결과 저장으로 중복 계산 방지
- **실시간 업데이트**: 새 데이터 수신 시 관련 지표 자동 재계산
- **커스텀 지표**: 사용자 정의 지표 추가 지원

#### 4.7 백테스팅 엔진 (Backtesting Engine)
- **과거 데이터 시뮬레이션**: PostgreSQL의 이력 데이터 활용
- **성과 지표**: 수익률, 샤프비율, MDD, 승률 등 계산
- **파라미터 최적화**: Grid Search를 통한 최적 설정 탐색
- **현실성 반영**: 슬리피지, 수수료 등 실제 거래 조건 적용

#### 4.8 이벤트 버스 (Event Bus)
- **Redis Pub/Sub**: 시스템 전체 이벤트 중계
- **비동기 처리**: 논블로킹 이벤트 전달
- **Request/Response**: RPC 스타일 즉시 응답 지원
- **확장성**: 여러 인스턴스 간 이벤트 공유 (향후 스케일링 대비)

### 운영 모드
시스템은 다음 3가지 모드로 운영 가능:

1. **백테스팅 모드**
   - 과거 데이터로 전략 검증
   - 성과 분석 및 최적화

2. **페이퍼 트레이딩 모드**
   - 실시간 데이터로 가상 거래
   - 실제 주문 없이 시스템 검증

3. **실전 투자 모드**
   - 실제 자금으로 거래 실행
   - 모든 리스크 관리 활성화

## 5. 주요 기능

### 5.1 데이터 관리
- **시계열 데이터 저장**: 1분봉, 5분봉, 일봉 데이터
- **기업 정보 관리**: 시가총액, 재무 데이터
- **데이터 동기화**: 실시간 업데이트 및 과거 데이터 보완
- **데이터 검증**: 이상치 탐지 및 보정

### 5.2 전략 관리
- **전략 플러그인 시스템**
  - 표준 인터페이스 구현
  - 전략별 파라미터 설정
  - 런타임 전략 교체
- **전략 성과 추적**
  - 실시간 수익률 모니터링
  - 전략별 성과 비교
  - 자동 최적화 알고리즘

### 5.3 거래 실행
- **자동 주문 생성**: 전략 신호 기반
- **스마트 주문**: 시장가/지정가 자동 선택
- **부분 체결 관리**: 미체결 주문 추적
- **거래 수수료 계산**: 실제 비용 반영

### 5.4 리스크 관리 (모든 파라미터 조절 가능)
- **손절선 관리**
  - 개별 종목별 손절 비율
  - 트레일링 스톱 구현
- **포지션 관리**
  - 종목별 최대 투자 비율
  - 섹터별 분산 투자
- **전체 리스크 관리**
  - 일일 최대 손실 한도
  - 월간 최대 손실 한도
  - 연속 손실 시 거래 중단
- **거래 빈도 제한**
  - 하루 최대 거래 횟수
  - 동일 종목 재매수 대기 시간

### 5.5 모니터링 및 알림
- **실시간 대시보드**
  - 포트폴리오 현황
  - 실시간 수익률
  - 리스크 지표
- **알림 시스템**
  - 중요 이벤트 알림 (큰 손실, 시스템 오류 등)
  - 일일 거래 요약 리포트
- **성과 분석**
  - 일/주/월별 수익률 분석
  - 승률, 평균 수익/손실 추적

## 6. 데이터 모델

### 6.1 시계열 데이터 (TimescaleDB)
```sql
-- 주가 데이터
CREATE TABLE stock_prices (
    time TIMESTAMPTZ NOT NULL,
    symbol VARCHAR(10) NOT NULL,
    open DECIMAL(10,2),
    high DECIMAL(10,2),
    low DECIMAL(10,2),
    close DECIMAL(10,2),
    volume BIGINT,
    interval_type VARCHAR(5) -- '1m', '5m', '1d'
);

-- 하이퍼테이블 생성
SELECT create_hypertable('stock_prices', 'time');
```

### 6.2 거래 기록
```sql
CREATE TABLE trades (
    id SERIAL PRIMARY KEY,
    timestamp TIMESTAMPTZ NOT NULL,
    symbol VARCHAR(10) NOT NULL,
    side VARCHAR(4) NOT NULL, -- 'BUY', 'SELL'
    quantity INTEGER NOT NULL,
    price DECIMAL(10,2) NOT NULL,
    strategy_name VARCHAR(50),
    commission DECIMAL(10,2),
    profit_loss DECIMAL(10,2)
);
```

### 6.3 전략 성과
```sql
CREATE TABLE strategy_performance (
    id SERIAL PRIMARY KEY,
    strategy_name VARCHAR(50) NOT NULL,
    date DATE NOT NULL,
    total_return DECIMAL(8,4),
    trades_count INTEGER,
    win_rate DECIMAL(5,2),
    max_drawdown DECIMAL(8,4)
);
```

## 7. 보안 및 안전성

### 7.1 API 보안
- 환경 변수로 API 키 관리
- API 호출 제한 준수
- 네트워크 타임아웃 설정

### 7.2 시스템 안전성
- 예외 상황 처리
- 자동 재시작 메커니즘
- 로그 기반 문제 추적
- 정기적인 시스템 헬스체크

### 7.3 데이터 백업
- 일일 데이터베이스 백업
- 중요 설정 파일 버전 관리
- 거래 기록 암호화 저장

## 8. 개발 단계

### Phase 1: 기반 시설 구축 (4주)
1. **개발 환경 설정**
   - PostgreSQL + TimescaleDB 설치 및 설정
   - Python 가상환경 및 의존성 관리
   - Git 저장소 설정

2. **데이터 수집 시스템**
   - 한국투자증권 API 연동
   - 웹소켓 실시간 데이터 수집
   - 과거 데이터 수집 배치 작업
   - 데이터베이스 스키마 설계 및 구현

3. **기본 웹 대시보드**
   - Next.js 프로젝트 설정
   - 기본 UI 컴포넌트 구현
   - 실시간 데이터 표시

### Phase 2: 거래 시스템 구현 (4주)
1. **전략 엔진 개발**
   - 전략 인터페이스 정의
   - 플러그인 아키텍처 구현
   - 샘플 전략 구현 (이동평균 등)

2. **주문 관리 시스템**
   - 주문 생성/실행/취소 로직
   - 포지션 관리
   - 거래 기록 저장

3. **백테스팅 엔진**
   - 과거 데이터 기반 시뮬레이션
   - 성과 지표 계산
   - 결과 시각화

### Phase 3: 리스크 관리 및 최적화 (3주)
1. **리스크 관리 구현**
   - 실시간 리스크 모니터링
   - 자동 손절/익절
   - 포지션 크기 관리

2. **모니터링 및 알림**
   - 실시간 대시보드 완성
   - 알림 시스템 구현
   - 성과 분석 기능

3. **시스템 최적화**
   - 성능 튜닝
   - 에러 핸들링 강화
   - 운영 자동화

### Phase 4: 테스트 및 배포 (2주)
1. **페이퍼 트레이딩**
   - 실시간 가상 거래 테스트
   - 시스템 안정성 검증
   - 성능 모니터링

2. **실전 배포 준비**
   - 보안 점검
   - 백업 시스템 구축
   - 운영 매뉴얼 작성

## 9. 성공 지표

### 주요 KPI
- **수익률 목표**: 일 0.05% (월 1.5%, 연 18%)
- **승률**: 60% 이상
- **최대 낙폭(MDD)**: 10% 이하
- **시스템 가동률**: 99% 이상

### 기술적 지표
- **데이터 수집 성공률**: 99.5% 이상
- **주문 실행 지연시간**: 1초 이내
- **시스템 응답시간**: 100ms 이내
- **데이터 정확성**: 99.9% 이상

## 10. 위험 요소 및 대응책

### 기술적 위험
- **API 장애**: 다중 데이터 소스 활용, 자동 재연결
- **시스템 오류**: 철저한 테스트, 자동 재시작
- **데이터 품질**: 실시간 검증, 이상치 탐지

### 시장 위험
- **급격한 시장 변동**: 엄격한 리스크 관리
- **유동성 부족**: 거래량 기반 종목 선별
- **시스템 리스크**: 분산 투자, 포지션 크기 제한

### 운영 위험
- **규제 변경**: 정기적인 규정 모니터링
- **API 정책 변경**: 대체 데이터 소스 준비
- **비용 증가**: 정기적인 비용 검토

## 11. 향후 확장 계획

### 단기 확장 (6개월)
- 추가 전략 알고리즘 개발
- 머신러닝 기반 예측 모델
- 모바일 앱 개발

### 중기 확장 (1년)
- 해외 주식 시장 확장
- 암호화폐 거래 지원
- 소셜 트레이딩 기능

### 장기 확장 (2년)
- AI 기반 자동 전략 생성
- 클라우드 기반 확장
- B2B 서비스 제공 